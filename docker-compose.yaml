version: '2.4'

services:

  # Nginx(UI)
  nginx:
    build:
      context: biap-app-ui-front
      dockerfile: Dockerfile
      args:
        REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
        REACT_APP_MMI_BASE_URL: ${REACT_APP_MMI_BASE_URL}
        REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
        REACT_APP_FIREBASE_AUTH_DOMAIN: ${REACT_APP_FIREBASE_AUTH_DOMAIN}
        REACT_APP_GOOGLE_API_KEY: ${REACT_APP_GOOGLE_API_KEY}
        REACT_APP_JUSTPAY_CLIENT_AND_MERCHANT_KEY: ${REACT_APP_JUSTPAY_CLIENT_AND_MERCHANT_KEY}
        REACT_APP_MERCHANT_KEY_ID: ${REACT_APP_MERCHANT_KEY_ID}
        REACT_APP_PAYMENT_SDK_ENV: ${REACT_APP_PAYMENT_SDK_ENV}
        REACT_APP_PAYMENT_SERVICE_URL: ${REACT_APP_PAYMENT_SERVICE_URL}
        REGISTRY_BASE_URL: ${REGISTRY_BASE_URL}
    container_name: biap-app-ui-front

    restart: always

    #    depends_on:
    #      - biap-bap-client
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    environment:
      REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
      REACT_APP_MMI_BASE_URL: ${REACT_APP_MMI_BASE_URL}
      REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
      REACT_APP_FIREBASE_AUTH_DOMAIN: ${REACT_APP_FIREBASE_AUTH_DOMAIN}
      REACT_APP_GOOGLE_API_KEY: ${REACT_APP_GOOGLE_API_KEY}
    depends_on:
      - mmi-client
      - biap-client-node-js
    expose:
      - 80
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
  certbot:
    image: certbot/certbot
    restart: "always"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Client Layer
  biap-client-node-js:
    restart: "always"
    build:
      context: biap-client-node-js
      args:
        JUSPAY_SECRET_KEY_PATH: ${JUSPAY_SECRET_KEY_PATH}
        JUSPAY_BASE_URL: ${JUSPAY_BASE_URL}
        JUSPAY_MERCHANT_ID: ${JUSPAY_MERCHANT_ID}
        JUSPAY_API_KEY: ${JUSPAY_API_KEY}
        FIREBASE_ADMIN_SERVICE_ACCOUNT: ${FIREBASE_ADMIN_SERVICE_ACCOUNT}
        ONDC_BASE_API_URL: ${ONDC_BASE_API_URL}
        JUSPAY_WEBHOOK_USERNAME: ${JUSPAY_WEBHOOK_USERNAME}
        JUSPAY_WEBHOOK_PASSWORD: ${JUSPAY_WEBHOOK_PASSWORD}
        DOMAIN: ${DOMAIN}
        CITY: ${CITY}
        COUNTRY: ${COUNTRY}
        BAP_ID: ${BAP_ID}
        BAP_URL: ${BAP_URL}
        PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
        DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
        BAP_PRIVATE_KEY: ${BAP_PRIVATE_KEY}
        BAP_PUBLIC_KEY: ${BAP_PUBLIC_KEY}
        BAP_UNIQUE_KEY_ID: ${BAP_UNIQUE_KEY_ID}
        PORT: 3000
        NODE_DEV: dev
        REGISTRY_BASE_URL: ${REGISTRY_BASE_URL}
        ENV_TYPE: ${ENV_TYPE}
        BAP_FINDER_FEE_TYPE: ${BAP_FINDER_FEE_TYPE}
        BAP_FINDER_FEE_AMOUNT: ${BAP_FINDER_FEE_AMOUNT}
        SSE_TIMEOUT: ${SSE_TIMEOUT}
        MMI_CLIENT_ID: ${MMI_CLIENT_ID}
        MMI_CLIENT_SECRET: ${MMI_CLIENT_SECRET}
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        S3_VERSION: "v4"
        S3_REGION: ${S3_REGION}
        S3_BUCKET: ${S3_BUCKET}
        RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
        RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
        RAZORPAY_WEBHOOK_SECRET: ${RAZORPAY_WEBHOOK_SECRET}
        BHASHINI_REDIS_PORT: ${BHASHINI_REDIS_PORT}
        BHASHINI_REDIS_HOST: cache
        BHASHINI_USERID: ${BHASHINI_USERID}
        BHASHINI_ULCA_API_KEY: ${BHASHINI_ULCA_API_KEY}
        DLT_CUSTOMER_ID: ${DLT_CUSTOMER_ID}
        DLT_ENTITY_ID: ${DLT_ENTITY_ID}
        DLT_USERNAME: ${DLT_USERNAME}
        DLT_PASSWORD: ${DLT_PASSWORD}
        DLT_SOURCE: ${DLT_SOURCE}
        DLT_MESSAGE_TYPE: ${DLT_MESSAGE_TYPE}
        CORS_WHITELIST_URLS: ${CORS_WHITELIST_URLS}
        ELASTIC_SEARCH_URL: http://elasticsearch:9200
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    ports:
      - 3000:3000
    expose:
      - 3000
    depends_on:
      - mongo
  mongo:
    image: mongo
    restart: always
    cpuset: "0"
    command: --wiredTigerCacheSizeGB 1.0
    ports:
      - 27020:27017
    volumes:
      - "./mongo-data:/data/db"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # IGM
  biap-igm-node-js:
    build:
      context: biap-igm-node-js
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
      SSE_TIMEOUT: ${SSE_TIMEOUT}
      DOMAIN: ${DOMAIN}
      COUNTRY: ${COUNTRY}
      BAP_ID: ${BAP_ID}
      EXPECTED_RESPONSE_TIME: ${EXPECTED_RESPONSE_TIME}
      EXPECTED_RESOLUTION_TIME: ${EXPECTED_RESOLUTION_TIME}
      BUGZILLA_API_KEY: ${BUGZILLA_API_KEY}
      BUGZILLA_SERVICE_URI: ${BUGZILLA_SERVICE_URI}
      BAP_URL: ${BAP_URL}
      VOLUME_IMAGES_BASE_URL: ${VOLUME_IMAGES_BASE_URL}
    container_name: biap-igm-node-js
    ports:
      - "8989:8989"
    expose:
      - 8989
    depends_on:
      - mongo1
    volumes:
      - "./images:/app/images"
    restart: always

  # Protocol Layer
  py-ondc-protocol:
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    build:
      context: py-ondc-protocol/webserver
      dockerfile: Dockerfile
    restart: always
    cap_add:
      - SYS_PTRACE
    environment:
      ENV: ${PROTOCOL_ENV}
      MONGO_DATABASE_URL: ${MONGO_DATABASE_URL}
      REGISTRY_BASE_URL: ${REGISTRY_BASE_URL}
      BAP_URL: ${BAP_URL}
      CLIENT_WEBHOOK_ENDPOINT: ${CLIENT_WEBHOOK_ENDPOINT}
      BAP_PRIVATE_KEY: ${BAP_PRIVATE_KEY}
      EXPECTED_RESPONSE_TIME: ${EXPECTED_RESPONSE_TIME}
      BAP_UNIQUE_KEY_ID: ${BAP_UNIQUE_KEY_ID}
      BAP_PUBLIC_KEY: ${BAP_PUBLIC_KEY}
      BAP_ID: ${BAP_ID}
      VERIFICATION_ENABLE: ${VERIFICATION_ENABLE}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      FLASK_SERVER: "True"
      QUEUE_ENABLE: "False"
      ELASTIC_SEARCH_QUEUE_ENABLE: "True"
      DUMP_ALL_REQUESTS: "True"
      CITY_LIST: ${CITY_LIST}
    expose:
      - 5555
  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672

  # Catalog Service
  elasticsearch:
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    image: elasticsearch:8.8.0
    mem_limit: 8gb
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx6g"  # Adjust as per your server resources
      - "http.max_content_length=200mb"  # Adjust based on your payload size
    volumes:
      - /home/ubuntu/elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
  catalog-service-transformer:
    restart: always
    mem_limit: 4gb
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    build:
      context: catalog-service
      dockerfile: dockerfiles/transformerDockerfile
    depends_on:
      - rabbitmq
      - mongo1
    environment:
      ENV: dev
      MONGO_DATABASE_URL: ${MONGO_DATABASE_URL}
      ELASTIC_SEARCH_URL: ${ELASTIC_SEARCH_URL}
      RABBITMQ_HOST: "rabbitmq"
      CONSUMER_MAX_WORKERS: "3"
      LANGUAGE_LIST: ${LANGUAGE_LIST}
  catalog-service-es-dumper:
    restart: always
    mem_limit: 3gb
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    build:
      context: catalog-service
      dockerfile: dockerfiles/esDumperDockerfile
    container_name: catalog-service-es-dumper
    depends_on:
      - elasticsearch
      - rabbitmq
    environment:
      ENV: dev
      RABBITMQ_HOST: "rabbitmq"
      ELASTIC_SEARCH_URL: ${ELASTIC_SEARCH_URL}
      CONSUMER_MAX_WORKERS: "20"
  catalog-service-translator:
    restart: always
    mem_limit: 5gb
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    build:
      context: catalog-service
      dockerfile: dockerfiles/translatorDockerfile
    depends_on:
      - rabbitmq
      - cache
    environment:
      ENV: dev
      RABBITMQ_HOST: "rabbitmq"
      REDIS_HOST: "cache"
      CONSUMER_MAX_WORKERS: "1"
      BHASHINI_USERID: ${BHASHINI_USERID}
      BHASHINI_ULCA_API_KEY: ${BHASHINI_ULCA_API_KEY}
      LANGUAGE_LIST: ${LANGUAGE_LIST}
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - 6379:6379
    expose:
      - 6379
    command: redis-server --save 20 1 --loglevel warning

  # Ancillary Services
  mmi-client:
    image: navdeep710/ondc-ancillary-services:v3
    container_name: map-client
    restart: always
    environment:
      ENV: prod
      MMI_CLIENT_ID: ${MMI_CLIENT_ID}
      MMI_CLIENT_SECRET: ${MMI_CLIENT_SECRET}
      MMI_ADVANCE_API_KEY: ${MMI_ADVANCE_API_KEY}
      KNOWLARITY_NUMBER: ${KNOWLARITY_NUMBER}
      KNOWLARITY_AGENT_NUMBER: ${KNOWLARITY_AGENT_NUMBER}
      KNOWLARITY_API_KEY: ${KNOWLARITY_API_KEY}
      KNOWLARITY_AUTHORIZATION_HEADER_KEY: ${KNOWLARITY_AUTHORIZATION_HEADER_KEY}
    ports:
      - 8000:8000
    expose:
      - 8000
  bugzilla-dev-service:
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    build:
      context: ./biap-bugzilla-service/bugzilla-main
      dockerfile: Dockerfile
    environment:
      BUGZILLA_WWW: /var/www/html/bugzilla/
      BUGZILLA_ADMIN_EMAIL: ${BUGZILLA_ADMIN_EMAIL}
    container_name: bugzilla-dev-service
    restart: always
    image: shameerkc/bugzilla-dev-sqlite
    ports:
      - "90:80"
